{ "body": "

<blockquote>\"Debugging is twice as hard as writing the code in 
the first place. Therefore, if you write the code as cleverly 
as possible, you are, by definition, not smart enough 
to debug it.\" -Brian Kernighan</blockquote></p>

After getting a chance to review few applications and test 
programs from potential hires, I have an idea of a possible 
college course - 'Real-life Software Development 301.' 
Maybe not a real course but a course project that heavily 
stresses the ability to quickly read other people's code.</p>

First and foremost, anyone starting programming should be 
prepared to read allot of code. If you get a programming 
job, it's very typical to have the first month on the job 
entirely devoted to reading and getting familiar with companies 
existing code. The faster you can read and understand that 
code the more value you bring to your employer.</p>

Being able to quickly read other people's code is a required 
skill, and it can only be taught by reading a lot of code, 
not developing stuff from scratch. People who can write good 
comments are rare and don't write many comments either, after 
all, this is software engineering field not English literature.</p>

Basic idea for the course is to let students pick an open source 
project that they love and use (maybe a single project for 
entire class) and from the beginning of the course define 
a reasonable set of features that could improve the project. 
Then spend the rest of the course helping students to simply 
read and understand as existing code as possible and teach 
software engineering principles, such as repository system, 
design patterns, etc.</p>

Another idea is to have an existing college project, like a 
game engine that is used in other courses and have a list of features 
that students can improve the software with (regardless 
if they used the game engine themselves or not) and throughout the course 
have them implement those features. At the conclusion of the 
course, roll back the repository to pre-features revision and 
get ready for another class. If embedded engineering course  
can require students to build elevator controller every single  
year, having student implement same software feature every  
year is not that bad because the goal is not to improve software  
but simply train the skill of quickly reading and understanding code.</p>

It would be an interesting software engineering study to 
measure code reading performance before and after having students read 
existing code for a month. Maybe time a control and fresh 
student group in reading a page or two of Java code and 
describe in English words what that code does.</p>

In any case, looking back at my college years, I really wish I had a course like that.</p>

"}
