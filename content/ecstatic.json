{ "body": "

There could be a variety of reasons for choosing to use a static site 
generator for a blog. Maybe you don't trust Facebook and think Wordpress is 
a Word-mess(tm), or you want to host your blog straight from S3 or even 
from your own windows box running a 
<a href='https://code.google.com/p/mongoose/'>45Kb web server</a>. 
In any case, a static site generator usually solves two problems:</p>
<ol>
 <li>Helps with creation and management of content.</li>
 <li>Enhances and optimizes content for readers.</li>
</ol>

After evaluating myriads of static site generators, looking for something 
simple and easy to maintain. I came to conclusion that while most of 
them offer a flexible solution to problem #2, solving problem #1 is typically 
done by installing a full blown SDK bloat.</p>

Let's look at <a href='http://jekyllrb.com/'>Jekyll</a> for example. 
Want a simple blog? Start by installing ruby then gems for template engines, 
gems for web server, gems for this and that. Additionally, while github 
pages are on the internet, SDK must be maintained and operational on any 
machine you want to update your blog from. It's like killing a bird with 
a giant boulder and smashing an entire flock (can be useful in some 
situation).
</p>
Then there is this markup/templating <em>help</em> where writing  
is aided by one or more template libs that convert all the 
<code>_hellos_</code> into <code>&lt;em&gt;hellos&lt;/em&gt;</code>. 
Whoa a whooping 7 chars reduction!
</p>
If users were smart enough to install a markup lib and SDK to use it, 
they probably won't be strangers to hyper-text-<strong>markup</strong>-language, 
HTML for short. It's easy to read. It renders reliably on all web browsers, 
it's been around for decades. 
<a href='http://en.wikipedia.org/wiki/HTML'>Look it up</a>.
</p>

So, it all came down to rolling yet another <em>simple</em> static 
site generator.</p> There seems to be only two options for a generator 
that solves both problems while not relying on some sort of SDK bloat 
installed on a machine to maintain its usefulness.
</p>

<ol>
  <li>Keep everything in plain HTML (like the good prophet 
  <a href='http://stallman.org/'>Stallman</a>), this option isn't 
  really a generator at all.
  <br>
      Pros: 
      <ul>
        <li>Simple!</li>
        <li>Compatibility across all browsers.</li>
      </ul>
      Cons:
      <ul>
        <li>Ugly!</li>
        <li>Unnecessary copy/pastes when adding a new page.</li>
      </ul>  
  </li>
  <li>Leverage powerful Javascript engine of a modern browser.
  <br>
      Pros: 
      <ul>
        <li>Pretty!</li>
        <li>Compatibility across all modern browsers including mobile 
        (with vanilla AngularJS and Bootstrap).</li>
      </ul>
      Cons:
      <ul>
        <li>Javascript</li>
        <li>More complex than plain HTML (jQuery, CSS, Angular...)</li>
      </ul>    
  </li>
</ol>
</p>

After reviewing few current UI frameworks, AngularJS + Bootstrap made second 
option more attractive and now there exists 
<a href='https://github.com/vitalius/vitalius.github.com/'>Ecstatic</a>!</p>

Ecstatic doesn't need a programming environment or SDK.
Content is added with just a text editor (notepad.exe, vi).</p>
<ol>
  <li>
    Posts reside as individual files under <code>content/</code> directory, 
    in a simple html format wrapped with <code>{ \"body\": \" ... \" }</code> JSON tags, 
    see <a href='/content/ecstatic.json'>this page</a> for example. 
    Before the JSON object is parsed, all line breaks and tabs are stripped out, 
    converting a post into a valid JSON feed. HTML formatting is fairly easy 
    to read and write. AngularJS and Bootstrap take care of the official HTTP 
    and layout business by setting all the header, footers, etc. To list a 
    post on the index page, an entry in 
    <a href='/content/index.json'>content/index.json</a> 
    is made with at least title and date values.
  </li>
  <li>
    Bootstrap and AngularJS allow for a pretty advanced, responsive layout. 
    By using vanilla css and javascript (no custom css.), Ecstatic is as 
    browser compatible as Bootstrap and AngularJS are.
  </li>
</ol>

<a href='http://disqus.com/'>Comments</a> or <a href='http://www.mathjax.org/'>math 
rendering</a> e.g. $ e^{ix} = \\cos x + i \\sin x $ can be added with additional 
javascript code snippets.

My goal is to use Ecstatic as a personal <em>simple</em> static site generator 
on this blog and further develop/fix it as use cases arise.
    
"}
